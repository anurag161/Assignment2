//
// Generated file, do not edit! Created by opp_msgtool 6.0 from TaskMes.msg.
//

#ifndef __TASKMES_M_H
#define __TASKMES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TaskMes;
/**
 * Class generated from <tt>TaskMes.msg:1</tt> by opp_msgtool.
 * <pre>
 * message TaskMes
 * {
 *     string text;
 *     int taskId;
 *     int subTaskId;
 *     string timestamp;
 * }
 * </pre>
 */
class TaskMes : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string text;
    int taskId = 0;
    int subTaskId = 0;
    omnetpp::opp_string timestamp;

  private:
    void copy(const TaskMes& other);

  protected:
    bool operator==(const TaskMes&) = delete;

  public:
    TaskMes(const char *name=nullptr, short kind=0);
    TaskMes(const TaskMes& other);
    virtual ~TaskMes();
    TaskMes& operator=(const TaskMes& other);
    virtual TaskMes *dup() const override {return new TaskMes(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getText() const;
    virtual void setText(const char * text);

    virtual int getTaskId() const;
    virtual void setTaskId(int taskId);

    virtual int getSubTaskId() const;
    virtual void setSubTaskId(int subTaskId);

    virtual const char * getTimestamp() const;
    virtual void setTimestamp(const char * timestamp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TaskMes& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TaskMes& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline TaskMes *fromAnyPtr(any_ptr ptr) { return check_and_cast<TaskMes*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TASKMES_M_H

